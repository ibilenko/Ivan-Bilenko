from sqlalchemy import create_engine
import telebot
from telebot import types
import pandas as pd
import telegram
from datetime import datetime
from telebot.types import LabeledPrice

bot = telebot.TeleBot('2029906477:AAHbVVLfwawBz0z5cYCKeR1spwU6hIyCiUU')


class main:
    db_string = "postgresql://hmxdnwubdttbnz:9e63e8f51fbdaa5a7dfd36e69526ffd277c532dd124debf16f9ef3cebcea5d79@ec2-52-31-233-101.eu-west-1.compute.amazonaws.com:5432/d10gqjnnkpealj"
    engine = create_engine(db_string, pool_size=10, max_overflow=20)
    bot_before_init = True  # –ø—Ä–∏ True –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∫–ª–∞—Å—Å–∞ –æ—Ç—Å—É—Ç—Å–≤—É–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–∑ –±–∞–∑—ã
    bot_working = False  # –ø—Ä–∏ True –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ —Å–µ–π—á–∞—Å —Ä–µ–∂–∏–º –æ–±–º–µ–Ω–∞ —Ç–µ–∫—Å–∞ —Å –ì–æ–≥–æ–ª–µ–º –∏ –º–æ–∂–Ω–æ –≤—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–æ–π –ú–µ–Ω—é
    ask_promo = False  # –ø—Ä–∏ True –æ–∂–∏–¥–∞–µ—Ç –ø—Ä–æ–º–æ–∫–æ–¥
    check_promo = False  # –ø—Ä–∏ True –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–≤–æ—Ç–µ–ª—é –Ω–∞–∂–∏–º–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –î–∞, –ù–µ—Ç –ø—Ä–æ–º–æ–∫–æ–¥–∞
    new_user = False  # –ø—Ä–∏ True —Å—Ü–µ–Ω–∞—Ä–∏–π —Å –∑–∞–ø—Ä–æ—Å–æ–º –ø—Ä–æ–º–æ–∫–æ–¥–∞
    prohibition = False
    alg_easy = """–õ–Å–ì–ö–ò–ô _(–º–µ–Ω—è–µ—Ç –Ω–µ —Å–∏–ª—å–Ω–æ, –±–µ–∑ –ø–æ—Ç–µ—Ä–∏ —Å–º—ã—Å–ª–∞)_"""
    alg_hard = """–°–õ–û–ñ–ù–´–ô _(–≤—ã—Å–æ–∫–∞—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å, –±—ã–≤–∞–µ—Ç –ø–æ—Ç–µ—Ä—è —Å–º—ã—Å–ª–∞)_"""
    alg = alg_easy
    dict_price = {'–ö—É—Ä—Å–æ–≤–æ–π': 10000, '–î–∏–ø–ª–æ–º': 40000, '–ü–∏—Å–∞—Ç–µ–ª—å': 100000}
    dict_symbols = {'–ö—É—Ä—Å–æ–≤–æ–π': 10000, '–î–∏–ø–ª–æ–º': 50000, '–ü–∏—Å–∞—Ç–µ–ª—å': -1}
    pay_token = '381764678:TEST:29902'
    start_txt = """–°–∞–ª—é—Ç üéá , —è –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç! 
–ú–æ–≥—É –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–≤–æ–π —Ç–µ–∫—Å—Ç, –ø–æ–≤—ã—à–∞—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∏ —É–±–∏—Ä–∞—è –æ—à–∏–±–∫–∏."""

    begin_txt = """–ò—Ç–∞–∫, –Ω–∞—á–Ω—ë–º:
üî∏ –ù–∞–ø–∏—à–∏—Ç–µ Ô∏è—Å–≤–æ–π —Ç–µ–∫—Å—Ç (–ª—É—á—à–µ –≤—Å—Ç–∞–≤–ª—è—Ç—å –∞–±–∑–∞—Ü–∞–º–∏ –¥–æ 300 —Å–∏–º–≤–æ–ª–æ–≤, —Ç–∞–∫ –ª–µ–≥—á–µ —Ä–∞–±–æ—Ç–∞—Ç—å)

üî∏  –ü–æ–ª—É—á–∏—Ç–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ –æ—Ç–≤–µ—Ç–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏. –ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–∞ –∞–Ω—Ç–∏–ø–ª–∞–≥–∏–∞—Ç –±—É–¥–µ—Ç *80 –∏ –±–æ–ª—å—à–µ*!"""
    balance_txt = """–•–æ—Ç–µ–ª –±—ã —è —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ, –Ω–æ —á–µ—Ä–Ω–∏–ª–∞, –ø–µ—Ä—å—è –∏ —Å–µ—Ä–≤–µ—Ä–∞ —Å—Ç–æ—è—Ç –¥–µ–Ω–µ–≥‚Ä¶ 

–£ –º–µ–Ω—è –µ—Å—Ç—å –∫ –≤–∞–º —Ç—Ä–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:
    
üî∂ –ü–∞–∫–µ—Ç ¬´–ö–£–†–°–ê–ß¬ª *10 000* —Å–∏–º–≤–æ–ª–æ–≤ –∑–∞ *100* —Ä—É–±–ª–µ–π. 
_–•–≤–∞—Ç–∏—Ç, —á—Ç–æ–±—ã –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫—É—Ä—Å–æ–≤–æ–π –ø—Ä–æ–µ–∫—Ç!_

üî∂ –ü–∞–∫–µ—Ç ¬´–î–ò–ü–õ–û–ú¬ª *50 000* —Å–∏–º–≤–æ–ª–æ–≤ –∑–∞ *400* —Ä—É–±–ª–µ–π. 
_–ù–∞ –≤–µ—Å—å –¥–∏–ø–ª–æ–º!_

üî∂ –ü–∞–∫–µ—Ç ¬´–ü–ò–°–ê–¢–ï–õ–¨¬ª *–°–∫–æ–ª—å–∫–æ —É–≥–æ–¥–Ω–æ!* –∑–∞ *1000* —Ä—É–±–ª–µ–π.
_–≠—Ç–∏–º —è —Å–∞–º –≤ —Å–≤–æ—ë –≤—Ä–µ–º—è –ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è._
"""
    promo_ask = """–£ –≤–∞—Å –µ—Å—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥?"""
    manual = """*–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è*:

–í–æ—Ç –≤—Å–µ, —á—Ç–æ –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å –æ–±–æ –º–Ω–µ:
ü§ñ –Ø –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç. –ú–æ–≥—É –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –∏ –ø–æ–≤—ã—Å–∏—Ç—å –µ–≥–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å 

üì≤ –ß—Ç–æ–±—ã —Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ –º–Ω–æ–π, –Ω—É–∂–Ω–æ –ø—Ä–∏—Å–ª–∞—Ç—å –º–Ω–µ —Ç–µ–∫—Å—Ç. –í –æ—Ç–≤–µ—Ç–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ —è –æ—Ç–ø—Ä–∞–≤–ª—é –µ–≥–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç.

üí° –ü–æ–¥ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é —è –ø–æ–Ω–∏–º–∞—é –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ—Å—Ç–∏, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∫–∞–∂–µ—Ç –ê–Ω—Ç–∏–ø–ª–∞–≥–∏–∞—Ç.

üìÉ –Ø –º–æ–≥—É —Ä–∞–±–æ—Ç–∞—Ç—å —Å —Ç–µ–∫—Å—Ç–æ–º –ª—é–±–æ–π –¥–ª–∏–Ω—ã, –Ω–æ —Å–æ–≤–µ—Ç—É—é –∑–∞–≥—Ä—É–∂–∞—Ç—å –∞–±–∑–∞—Ü–∞–º–∏ –¥–æ 300 —Å–∏–º–≤–æ–ª–æ–≤, —Ç–∞–∫ –±—É–¥–µ—Ç —É–¥–æ–±–Ω–µ–µ –≤–∞–º.

üí≥ –£ –≤–∞—Å –µ—Å—Ç—å –±–∞–ª–∞–Ω—Å —Å–∏–º–≤–æ–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –º–æ–∂–µ—Ç–µ –º–Ω–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å. –î–ª—è –µ–≥–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞.

üÜò –ü–æ –ª—é–±—ã–º –≤–æ–ø—Ä–æ—Å–∞–º –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º –º–æ–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤ —á–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏.

  
"""
    promo_text = """–ü—Ä–∏–Ω—è–ª!
–í–∞–º –ø–æ–¥–∞—Ä–æ–∫ üéÅ - """
    zero_sym_txt = """üòî–ñ–∞–ª—å, –Ω–æ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–º–≤–æ–ª–æ–≤.
–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –∏–ª–∏ —É–º–µ–Ω—å—à–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞üòâ"""

    kb_algo = telebot.types.InlineKeyboardMarkup()
    kb_algo.row(telebot.types.InlineKeyboardButton('–ê–ª–≥–æ—Ä–∏—Ç–º üîõ', callback_data='change_alg_working_mode'),
                telebot.types.InlineKeyboardButton('–ú–µ–Ω—é üì±', callback_data='menu'))
    kb_no_promo = telebot.types.InlineKeyboardMarkup()
    kb_no_promo.row(telebot.types.InlineKeyboardButton('–í–≤–µ—Å—Ç–∏ –µ—â—ë —Ä–∞–∑üîÑ', callback_data='promo_yes'),
                    telebot.types.InlineKeyboardButton('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å ‚û°Ô∏è', callback_data='promo_no'))

    kb_manual = telebot.types.InlineKeyboardMarkup()
    kb_manual.row(telebot.types.InlineKeyboardButton('–í—Å—ë –ø–æ–Ω—è—Ç–Ω–æ!', callback_data='menu'),
                  telebot.types.InlineKeyboardButton('–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å', callback_data='support',
                                                     url='https://t.me/izgarshevegor'))
    kb_menu = telebot.types.InlineKeyboardMarkup()
    kb_menu.row(telebot.types.InlineKeyboardButton('–ù–∞—á–∞—Ç—å ‚ñ∂', callback_data='begin'),
                telebot.types.InlineKeyboardButton('–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è üóù', callback_data='manual'))
    kb_menu.row(telebot.types.InlineKeyboardButton('–ë–∞–ª–∞–Ω—Å üí≥', callback_data='balance'),
                telebot.types.InlineKeyboardButton('–ê–ª–≥–æ—Ä–∏—Ç–º üîõ', callback_data='change_alg'))
    kb_menu.add(
        telebot.types.InlineKeyboardButton('–ß–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏', callback_data='support', url='https://t.me/izgarshevegor'))
    kb_balance = telebot.types.InlineKeyboardMarkup()
    kb_balance.row(telebot.types.InlineKeyboardButton('–ö—É—Ä—Å–∞—á', callback_data='first'),
                   telebot.types.InlineKeyboardButton('–î–∏–ø–ª–æ–º', callback_data='second'),
                   telebot.types.InlineKeyboardButton('–ü–∏—Å–∞—Ç–µ–ª—å', callback_data='third'))
    kb_balance.add(telebot.types.InlineKeyboardButton('–ú–µ–Ω—é üì±', callback_data='back'))
    kb_zero_symbols = telebot.types.InlineKeyboardMarkup()
    kb_zero_symbols.row(telebot.types.InlineKeyboardButton('–ë–∞–ª–∞–Ω—Å üí≥', callback_data='balance'),
                        telebot.types.InlineKeyboardButton('–ú–µ–Ω—é üì±', callback_data='menu'))
    kb = telebot.types.InlineKeyboardMarkup()
    kb.row(
        telebot.types.InlineKeyboardButton('–î–ê‚ò∫Ô∏è', callback_data='promo_yes'),
        telebot.types.InlineKeyboardButton('–ù–ï–¢ü•≤', callback_data='promo_no')
    )

    def get_promo(promo: str, engine):
        '''–î–æ—Å—Ç–∞—ë—Ç –ø–æ–¥–∞—Ä–æ—á–Ω–æ–µ –∫–æ–ª-–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –ø–æ –ø—Ä–æ–º–æ–∫–æ–¥—É'''
        df = pd.read_sql(f"""select symbols from gogol.sources where promo = '{promo}'""", engine)
        if not df.empty:
            return df['symbols'][0]
        else:
            return False

    def check_user(user_id: int, engine) -> None:
        '''–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–æ–≤—ã–π —é–∑–µ—Ä –∏–ª–∏ –Ω–µ—Ç'''
        df = pd.read_sql(f"""select id from gogol.users where id = {user_id}""", engine)
        if df.empty:
            print(df)
            main.new_user = True
        else:
            print('–ø—É—Å—Ç–æ–π —Ñ—Ä–µ–π–º')
            main.new_user = False

    def append_user(user_id: int, engine) -> None:
        '''–î–æ–±–∞–≤–ª—è–µ—Ç —é–∑–µ—Ä–∞ –≤ –±–∞–∑—É'''
        now = str(datetime.now().date())
        engine.connect().execute(f"""insert into gogol.users values ({user_id},0, 0,'–õ—ë–≥–∫–∏–π', '{now}' ,null,100,'menu')""")
        main.new_user = False

    def append_promo(user_id: int, promo, engine) -> None:
        '''–î–æ–±–∞–≤–ª—è–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫ –æ—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ –ø—Ä–∏—à—ë–ª —é–∑–µ—Ä'''
        engine.connect().execute(
            f"""update gogol.users set source = (select id from gogol.sources where promo = '{promo}')
                                     where id = {user_id}""")

    def allowed(user_id: int, symbols: int, engine) -> None:
        '''–†–∞—Å—à–∏—Ä—è–µ—Ç –¥–∏–∞–ø–∞–∑–æ–Ω –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è —é–∑–µ—Ä–∞'''
        if symbols != -1:
            engine.connect().execute(f"""update gogol.users set allowed_symbols = allowed_symbols + {symbols}
                                         where id = {user_id}""")
        else:
            engine.connect().execute(f"""update gogol.users set allowed_symbols = {-1}
                                                     where id = {user_id}""")

    def spend(user_id: int, symbols: int, engine) -> None:
        '''–û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ—É –ø–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—ã–º —Å–∏–º–≤–æ–ª–∞–º'''
        if main.allowed_symbols != -1:
            engine.connect().execute(f"""update gogol.users set allowed_symbols = allowed_symbols - {symbols}
                                         where id = {user_id}""")
            engine.connect().execute(f"""update gogol.users set spend_symbols = spend_symbols + {symbols}
                                         where id = {user_id}""")
        else:
            engine.connect().execute(f"""update gogol.users set spend_symbols = spend_symbols + {symbols}
                                                     where id = {user_id}""")

    def get_menu_info(user_id: int, engine) -> None:
        '''–î–æ—Å—Ç–∞—ë—Ç –∏–Ω—Ñ—É –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞'''
        df = pd.read_sql(f"""select spend_symbols, allowed_symbols, algoritm, mode from gogol.users where id = {user_id}""",
                         engine)
        if not df.empty:
            main.allowed_symbols = df['allowed_symbols'][0]
            main.spend_symbols = df['spend_symbols'][0]
            main.bot_working = True if df['mode'][0] == 'work' else False
            if df['algoritm'][0] == '–õ—ë–≥–∫–∏–π'
                main.alg = main.alg_easy
            else:
                main.alg = main.alg_hard
        else:
            raise NameError(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å user_id = {user_id} –æ—Ç—Å—É—Ç—Å–≤—É–µ—Ç –≤ gogol.users')

    def payment_insert(user_id: int, package: str, price: int, symbols: int, engine) -> None:
        '''–î–æ–±–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–ø–ª–∞—Ç–µ'''
        now = datetime.now()
        engine.connect().execute(
            f"""insert into gogol.payment_logs values ({user_id},'{package}',{price},'{now}',{symbols})""")

    def menu_txt() -> str:
        if main.allowed_symbols == -1:
            allowed_symbols = '‚àû'
        else:
            allowed_symbols = main.allowed_symbols
        menu_txt = f"""*–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å*

–î–æ—Å—Ç—É–ø–Ω–æ: *{allowed_symbols}* —Å–∏–º–≤–æ–ª–æ–≤
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: *{main.spend_symbols}* —Å–∏–º–≤–æ–ª–æ–≤
–ê–ª–≥–æ—Ä–∏—Ç–º: {main.alg}

–ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å?"""

        return menu_txt

    def check_bot_status(user_id: int, engine) -> bool:
        if main.bot_before_init:
            main.check_user(user_id, main.engine)
            if not main.new_user:
                main.get_menu_info(user_id, engine)
            main.bot_before_init = False
        return True

    def change_algoritm(user_id: int, engine, algoritm: str) -> None:
        engine.connect().execute(f"""update gogol.users set algoritm = '{algoritm}' where id = {user_id}""")

    @bot.message_handler(commands=['start'])
    def start_message(message):
        print(main.bot_working)
        if not main.bot_working:
            user_id = message.chat.id
            main.check_user(user_id, main.engine)
            if main.new_user:
                bot.send_message(user_id, main.start_txt)
                main.ask_promo = True
                main.check_promo = True
                bot.send_message(user_id, text=main.promo_ask, reply_markup=main.kb)
                main.append_user(user_id, main.engine)
                main.new_user = False
            else:
                bot.send_message(user_id, "–ü—Ä–∏–≤–µ—Ç üëã –†–∞–¥ –≤–∞—Å –≤–∏–¥–µ—Ç—å!")
                main.get_menu_info(user_id, main.engine)
                bot.send_message(user_id, main.menu_txt(), reply_markup=main.kb_menu,
                                 parse_mode=telegram.ParseMode.MARKDOWN)

    @bot.pre_checkout_query_handler(func=lambda query: True)
    def process_pre_checkout_query(pre_checkout_query: types.PreCheckoutQuery):
        bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)

    @bot.message_handler(content_types=['successful_payment'])
    def process_successful_payment(message):
        user_id = message.chat.id
        package = message.successful_payment.invoice_payload
        price = main.dict_price[package] // 100
        symbols = main.dict_symbols[package]
        if package == '–ö—É—Ä—Å–æ–≤–æ–π':
            bot.send_message(user_id, text='–£—Å–ø–µ—à–Ω–æ! –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –∂–¥—ë–º –æ—Ç–≤–µ—Ç –æ—Ç –ì–æ–≥–æ–ª—è.')
            main.payment_insert(user_id, package, price, symbols, main.engine)
            main.allowed(user_id, symbols, main.engine)
            main.get_menu_info(user_id, main.engine)
            bot.send_message(user_id, text='–û—Ç–ª–∏—á–Ω–æ, —Ä–∞–±–æ—Ç–∞–µ–ºü§ô')
            bot.send_message(user_id, text=main.menu_txt(), reply_markup=main.kb_menu,
                             parse_mode=telegram.ParseMode.MARKDOWN)
        if package == '–î–∏–ø–ª–æ–º':
            bot.send_message(user_id, text='–£—Å–ø–µ—à–Ω–æ! –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –∂–¥—ë–º –æ—Ç–≤–µ—Ç –æ—Ç –ì–æ–≥–æ–ª—è.')
            main.payment_insert(user_id, package, price, symbols, main.engine)
            main.allowed(user_id, symbols, main.engine)
            main.get_menu_info(user_id, main.engine)
            bot.send_message(user_id, text='–¢–æ, —á—Ç–æ –Ω–∞–¥–æ, —á—Ç–æ–±—ã –∑–∞–∫–æ–Ω—á–∏—Ç—å —É—á–µ–±—Éü§å')
            bot.send_message(user_id, text=main.menu_txt(), reply_markup=main.kb_menu,
                             parse_mode=telegram.ParseMode.MARKDOWN)
        if package == '–ü–∏—Å–∞—Ç–µ–ª—å':
            bot.send_message(user_id, text='–£—Å–ø–µ—à–Ω–æ! –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –∂–¥—ë–º –æ—Ç–≤–µ—Ç –æ—Ç –ì–æ–≥–æ–ª—è.')
            main.payment_insert(user_id, package, price, symbols, main.engine)
            main.allowed(user_id, symbols, main.engine)
            main.get_menu_info(user_id, main.engine)
            bot.send_message(user_id, text='–ö –í–∞—à–∏–º —É—Å–ª—É–≥–∞–º, –∫–æ–ª–ª–µ–≥–∞ü§ù')
            bot.send_message(user_id, text=main.menu_txt(), reply_markup=main.kb_menu,
                             parse_mode=telegram.ParseMode.MARKDOWN)

    @bot.message_handler(content_types=['text'])
    def send_screen(message):
        user_id = message.chat.id
        if main.check_bot_status(user_id, main.engine):
            if main.ask_promo:
                promo = message.text
                promo_symbols = main.get_promo(promo, main.engine)
                if promo_symbols:
                    main.append_promo(user_id, promo, main.engine)
                    main.allowed(user_id, promo_symbols, main.engine)
                    main.get_menu_info(user_id, main.engine)
                    bot.send_message(user_id, text=main.promo_text + f'{promo_symbols} —Å–∏–º–≤–æ–ª–æ–≤')
                    bot.send_message(user_id, text=main.menu_txt(), reply_markup=main.kb_menu,
                                     parse_mode=telegram.ParseMode.MARKDOWN)
                    main.check_promo = False
                else:
                    bot.send_message(user_id, text="—Ö–º‚Ä¶üòè–ù–µ –Ω–∞—à—ë–ª —Ç–∞–∫–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞", reply_markup=main.kb_no_promo)
                main.ask_promo = False
            if main.bot_working and not main.prohibition:  # (1) –∑–¥–µ—Å—å –æ–Ω –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                len_symbols = len(message.text)
                if len_symbols > 3800:
                    main.prohibition = True
                    bot.send_message(user_id, text=f'–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç üôÉ. –ù—É–∂–Ω–æ —É–±—Ä–∞—Ç—å *{len_symbols-3800}* —Å–∏–º–≤. –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏', reply_markup=main.kb_zero_symbols,
                                     parse_mode=telegram.ParseMode.MARKDOWN)
                    main.prohibition = False
                else:
                    if main.allowed_symbols != -1 and main.allowed_symbols - len_symbols < 0:
                        bot.send_message(user_id, text=main.zero_sym_txt, reply_markup=main.kb_zero_symbols,
                                         parse_mode=telegram.ParseMode.MARKDOWN)# —Ç—É—Ç reply, –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å —Å–∏–º–≤–æ–ª—ã
                        # –≤ —Ç–µ–∫—Å—Ç –æ—Ç –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –≤—Å—Ç–∞–≤–∏—Ç—å
                    else:
                        main.get_menu_info(user_id, main.engine)
                        main.spend(user_id, len_symbols, main.engine)
                    bot.send_message(user_id, text='–æ—Ç–≤–µ—Ç', reply_markup=main.kb_algo,#—Ç—É—Ç reply –Ω–∞ –æ–±—ã—á–Ω—ã–π –æ—Ç–≤–µ—Ç
                                     parse_mode=telegram.ParseMode.MARKDOWN)

    @bot.callback_query_handler(func=lambda call: True)
    def callback_inline(call):
        user_id = call.message.chat.id
        if main.check_bot_status(user_id, main.engine):
            if call.data == 'change_alg_working_mode':
                if main.alg == main.alg_hard:
                    main.alg = main.alg_easy
                    main.change_algoritm(user_id, main.engine, "–õ—ë–≥–∫–∏–π")
                    bot.send_message(user_id, text=f'–ü–æ–º–µ–Ω—è–ª –∞–ª–≥–æ—Ä–∏—Ç–º –Ω–∞ {main.alg_easy}. –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç:',parse_mode=telegram.ParseMode.MARKDOWN)
                else:
                    main.alg = main.alg_hard
                    main.change_algoritm(user_id, main.engine, "–°–ª–æ–∂–Ω—ã–π")
                    bot.send_message(user_id, text=f'–ü–æ–º–µ–Ω—è–ª –∞–ª–≥–æ—Ä–∏—Ç–º –Ω–∞ {main.alg_hard}. –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç:',parse_mode=telegram.ParseMode.MARKDOWN)
            if call.data == 'menu':
                main.get_menu_info(user_id, main.engine)
                bot.send_message(user_id, text=main.menu_txt(), reply_markup=main.kb_menu,parse_mode=telegram.ParseMode.MARKDOWN)
                main.bot_working = False
                main.engine.connect().execute(f"update gogol.users set mode = 'menu' where id = {user_id}")
            if call.data == 'balance':
                bot.send_message(user_id, text=main.balance_txt, reply_markup=main.kb_balance,parse_mode=telegram.ParseMode.MARKDOWN)
                main.bot_working = False
            if call.data == "begin":# —ç—Ç–∞ –∫–Ω–æ–ø–∫–∞ –Ω–∞—á–∞—Ç—å, –ø–æ –∫–æ—Ç–æ—Ä–æ–π –æ–Ω –≤–∫–ª—é—á–∞–µ—Ç —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ (1)
                main.bot_working = True
                main.engine.connect().execute(f"update gogol.users set mode = 'work' where id = {user_id}")
                bot.send_message(user_id, text=main.begin_txt,parse_mode=telegram.ParseMode.MARKDOWN)
            if call.data == "manual":
                bot.send_message(user_id, text=main.manual, reply_markup=main.kb_manual,
                                 parse_mode=telegram.ParseMode.MARKDOWN)
                main.bot_working = False
            if call.data == 'first':
                bot.send_invoice(user_id, title='–ü–∞–∫–µ—Ç "–ö—É—Ä—Å–∞—á"',
                                 description="""–ü–∞–∫–µ—Ç —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –∫–æ–ª-–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –Ω–∞ 10 000 —à—Ç.""",
                                 provider_token=main.pay_token,
                                 currency='rub',
                                 is_flexible=False,
                                 prices=[LabeledPrice(label='–¶–µ–Ω–∞', amount=main.dict_price['–ö—É—Ä—Å–æ–≤–æ–π'])],
                                 invoice_payload='–ö—É—Ä—Å–æ–≤–æ–π')
            if call.data == 'second':
                bot.send_invoice(user_id, title='–ü–∞–∫–µ—Ç "–î–∏–ø–ª–æ–º"',
                                 description="""–ü–∞–∫–µ—Ç —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –∫–æ–ª-–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –Ω–∞ 50 000 —à—Ç.""",
                                 provider_token=main.pay_token,
                                 currency='rub',
                                 is_flexible=False,  # True If you need to set up Shipping Fee
                                 prices=[LabeledPrice(label='–¶–µ–Ω–∞', amount=main.dict_price['–î–∏–ø–ª–æ–º'])],
                                 invoice_payload='–î–∏–ø–ª–æ–º')
            if call.data == 'third':
                bot.send_invoice(user_id, title='–ü–∞–∫–µ—Ç "–ü–∏—Å–∞—Ç–µ–ª—å"',
                                 description="""–ü–∞–∫–µ—Ç —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –∫–æ–ª-–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –Ω–∞ –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ""",
                                 provider_token=main.pay_token,
                                 currency='rub',
                                 is_flexible=False,  # True If you need to set up Shipping Fee
                                 prices=[LabeledPrice(label='–¶–µ–Ω–∞', amount=main.dict_price['–ü–∏—Å–∞—Ç–µ–ª—å'])],
                                 invoice_payload='–ü–∏—Å–∞—Ç–µ–ª—å')
            if not main.bot_working:
                if call.data == 'change_alg':
                    if main.alg == main.alg_hard:
                        main.alg = main.alg_easy
                        main.change_algoritm(user_id, main.engine, "–õ—ë–≥–∫–∏–π")
                        bot.send_message(user_id, text='–ü–æ–º–µ–Ω—è–ª –∞–ª–≥–æ—Ä–∏—Ç–º –Ω–∞ "–õ—ë–≥–∫–∏–π"')
                    else:
                        main.alg = main.alg_hard
                        main.change_algoritm(user_id, main.engine, "–°–ª–æ–∂–Ω—ã–π")
                        bot.send_message(user_id, text='–ü–æ–º–µ–Ω—è–ª –∞–ª–≥–æ—Ä–∏—Ç–º –Ω–∞ "–°–ª–æ–∂–Ω—ã–π"')
                    bot.send_message(user_id, text=main.menu_txt(), reply_markup=main.kb_menu,parse_mode=telegram.ParseMode.MARKDOWN)
                    main.bot_working = False
                if call.data == "promo_yes":
                    if main.check_promo:
                        main.ask_promo = True
                        bot.send_message(user_id, text=f"–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ ‚ÜòÔ∏è:")
                if call.data == "promo_no":
                    if main.check_promo:
                        main.ask_promo = False
                        main.check_promo = False
                        main.get_menu_info(user_id, main.engine)
                        bot.send_message(user_id, text=main.menu_txt(), reply_markup=main.kb_menu,parse_mode=telegram.ParseMode.MARKDOWN)
                if call.data == "back":
                    bot.send_message(user_id, text=main.menu_txt(), reply_markup=main.kb_menu,parse_mode=telegram.ParseMode.MARKDOWN)



bot.polling()
